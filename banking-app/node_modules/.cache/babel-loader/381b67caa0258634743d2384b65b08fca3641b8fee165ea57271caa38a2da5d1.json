{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nghia\\\\Desktop\\\\Learning Web Coding\\\\banking-application\\\\src\\\\store\\\\AuthProvider.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport AuthContext from \"./auth-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthProvider = props => {\n  _s();\n  const [currentLogin, setCurrentLogin] = useState({});\n  const [accounts, setAccounts] = useState([]);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    console.log(\"use effect ran\");\n    fetch(\"http://localhost:1337/api/accounts\").then(res => {\n      return res.json();\n    }).then(data => {\n      const accountsFetched = data.data;\n      console.log(accountsFetched);\n      setAccounts(accountsFetched);\n    });\n  }, []);\n  const signupHandler = (firstName, lastName, email, password) => {\n    setAccounts(prevState => [...prevState, {\n      firstName: firstName,\n      lastName: lastName,\n      email: email,\n      password: password,\n      balance: 0,\n      transaction: []\n    }]);\n  };\n  const loginHandler = (email, password) => {\n    let isFound = false;\n    if (accounts.length === 0) isFound = false;\n    for (let i = 0; i < accounts.length; i++) {\n      if (accounts[i].attributes.email === email && accounts[i].attributes.password === password) {\n        setIsLoggedIn(true);\n        setCurrentLogin(accounts[i]);\n        isFound = true;\n        break;\n      }\n    }\n    if (!isFound) alert(\"Account not found!\");\n  };\n  const logoutHandler = () => {\n    setIsLoggedIn(false);\n    setCurrentLogin({});\n  };\n  const deposit = (amount, activity) => {\n    const transactionArr = Object.values(currentLogin.attributes.transaction);\n    const newBalance = currentLogin.attributes.balance + parseInt(amount);\n    fetch(`http://localhost:1337/api/accounts/${currentLogin.id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        data: {\n          balance: newBalance,\n          transaction: JSON.stringify([activity, ...transactionArr])\n        }\n      })\n    }.then(res => res.json()).then(data => setCurrentLogin(data.data)));\n  };\n  const withdrawal = (amount, activity) => {\n    currentLogin.money -= parseInt(amount);\n    currentLogin.transaction = [activity, ...currentLogin.transaction];\n    setCurrentLogin(currentLogin);\n  };\n  const authContext = {\n    users: accounts,\n    isLoggedIn: isLoggedIn,\n    currentLogin: currentLogin,\n    onLogout: logoutHandler,\n    onLogin: loginHandler,\n    onSignup: signupHandler,\n    onDeposit: deposit,\n    onWithdrawal: withdrawal\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"ri+DbZKkBgplrdf9n6USUzpcAM0=\");\n_c = AuthProvider;\nexport default AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["useEffect","useState","AuthContext","jsxDEV","_jsxDEV","AuthProvider","props","_s","currentLogin","setCurrentLogin","accounts","setAccounts","isLoggedIn","setIsLoggedIn","console","log","fetch","then","res","json","data","accountsFetched","signupHandler","firstName","lastName","email","password","prevState","balance","transaction","loginHandler","isFound","length","i","attributes","alert","logoutHandler","deposit","amount","activity","transactionArr","Object","values","newBalance","parseInt","id","method","headers","body","JSON","stringify","withdrawal","money","authContext","users","onLogout","onLogin","onSignup","onDeposit","onWithdrawal","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/nghia/Desktop/Learning Web Coding/banking-application/src/store/AuthProvider.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport AuthContext from \"./auth-context\";\r\n\r\nconst AuthProvider = (props) => {\r\n  const [currentLogin, setCurrentLogin] = useState({});\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    console.log(\"use effect ran\");\r\n    fetch(\"http://localhost:1337/api/accounts\")\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        const accountsFetched = data.data;\r\n        console.log(accountsFetched);\r\n        setAccounts(accountsFetched);\r\n      });\r\n  }, []);\r\n\r\n  const signupHandler = (firstName, lastName, email, password) => {\r\n    setAccounts((prevState) => [\r\n      ...prevState,\r\n      {\r\n        firstName: firstName,\r\n        lastName: lastName,\r\n        email: email,\r\n        password: password,\r\n        balance: 0,\r\n        transaction: [],\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const loginHandler = (email, password) => {\r\n    let isFound = false;\r\n    if (accounts.length === 0) isFound = false;\r\n\r\n    for (let i = 0; i < accounts.length; i++) {\r\n      if (\r\n        accounts[i].attributes.email === email &&\r\n        accounts[i].attributes.password === password\r\n      ) {\r\n        setIsLoggedIn(true);\r\n        setCurrentLogin(accounts[i]);\r\n        isFound = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!isFound) alert(\"Account not found!\");\r\n  };\r\n\r\n  const logoutHandler = () => {\r\n    setIsLoggedIn(false);\r\n    setCurrentLogin({});\r\n  };\r\n\r\n  const deposit = (amount, activity) => {\r\n    const transactionArr = Object.values(currentLogin.attributes.transaction);\r\n    const newBalance = currentLogin.attributes.balance + parseInt(amount);\r\n    fetch(\r\n      `http://localhost:1337/api/accounts/${currentLogin.id}`,\r\n      {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          data: {\r\n            balance: newBalance,\r\n            transaction: JSON.stringify([activity, ...transactionArr]),\r\n          },\r\n        }),\r\n      }\r\n        .then((res) => res.json())\r\n        .then((data) => setCurrentLogin(data.data))\r\n    );\r\n  };\r\n\r\n  const withdrawal = (amount, activity) => {\r\n    currentLogin.money -= parseInt(amount);\r\n    currentLogin.transaction = [activity, ...currentLogin.transaction];\r\n    setCurrentLogin(currentLogin);\r\n  };\r\n\r\n  const authContext = {\r\n    users: accounts,\r\n    isLoggedIn: isLoggedIn,\r\n    currentLogin: currentLogin,\r\n    onLogout: logoutHandler,\r\n    onLogin: loginHandler,\r\n    onSignup: signupHandler,\r\n    onDeposit: deposit,\r\n    onWithdrawal: withdrawal,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={authContext}>\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthProvider;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}